/* soapIoSteerWSObject.h
   Generated by gSOAP 2.7.9l from IoSteerWS.h
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapIoSteerWSObject_H
#define soapIoSteerWSObject_H
#include "soapH.h"

/******************************************************************************\
 *                                                                            *
 * Service Object                                                             *
 *                                                                            *
\******************************************************************************/

class IoSteerWSService : public soap
{    public:
	IoSteerWSService()
	{ static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:IoSteerWS", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces) this->namespaces = namespaces; };
	virtual ~IoSteerWSService() { };
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog) { return soap_bind(this, host, port, backlog); };
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept() { return soap_accept(this); };
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve() { return soap_serve(this); };
};

/******************************************************************************\
 *                                                                            *
 * Service Operations (you should define these globally)                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns__add(struct soap*, double a, double b, double *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__getstep(struct soap*, int id, int *step);

SOAP_FMAC5 int SOAP_FMAC6 ns__setstep(struct soap*, int id, int newstep, int *step);

SOAP_FMAC5 int SOAP_FMAC6 ns__getnsteps(struct soap*, int id, int *nsstep);

SOAP_FMAC5 int SOAP_FMAC6 ns__setnsteps(struct soap*, int id, int newnsteps, int *nsteps);

SOAP_FMAC5 int SOAP_FMAC6 ns__runsimulationstep(struct soap*, int id, int istepnum, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__runsimulation(struct soap*, int id, char *simfilecontent, char **result);

SOAP_FMAC5 int SOAP_FMAC6 ns__requestsimulation(struct soap*, char *simfilecontent, int *isimid);

SOAP_FMAC5 int SOAP_FMAC6 ns__runrequestedsimulation(struct soap*, int isimid, int *istatus);

SOAP_FMAC5 int SOAP_FMAC6 ns__submitsimulation(struct soap*, char *simfilecontent, int *isimid);

SOAP_FMAC5 int SOAP_FMAC6 ns__simulationstatus(struct soap*, int isimid, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__getsimulationresults(struct soap*, int isimid, char **result);

SOAP_FMAC5 int SOAP_FMAC6 ns__deletesimulation(struct soap*, int isimid, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__newsimulation(struct soap*, int id, char *simname, char *xslname, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__createsimulation(struct soap*, int id, char *filename, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__writelocalsimulation(struct soap*, int id, char *filename, char **filecontent);

SOAP_FMAC5 int SOAP_FMAC6 ns__readlocalsimulation(struct soap*, int id, char *filename, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__writesimulation(struct soap*, int id, char *filename, char **filecontent);

SOAP_FMAC5 int SOAP_FMAC6 ns__readsimulation(struct soap*, int id, char *filename, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__exitiome(struct soap*, int id, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__addparamdouble(struct soap*, int id, char *name, double value, int iflag, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__addparamint(struct soap*, int id, char *name, int value, int iflag, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__addparamvec(struct soap*, int id, char *name, struct fdata value, int n, int iflag, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__addparammat(struct soap*, int id, char *name, struct fdata value, int nr, int nc, int iflag, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__addparamstring(struct soap*, int id, char *name, char *value, int iflag, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__addparammmat3d(struct soap*, int id, char *name, struct fdata value, int n, int p, int q, int nr, int nc, int iflag, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__addmetadata(struct soap*, int id, char *name, char *property, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__getparamdouble(struct soap*, int id, char *name, double *value);

SOAP_FMAC5 int SOAP_FMAC6 ns__getparamint(struct soap*, int id, char *name, int *value);

SOAP_FMAC5 int SOAP_FMAC6 ns__getparamvec(struct soap*, int id, char *name, int n, struct fdata **dval);

SOAP_FMAC5 int SOAP_FMAC6 ns__getparammat(struct soap*, int id, char *name, int nr, int nc, struct fdata **dval);

SOAP_FMAC5 int SOAP_FMAC6 ns__getparamstring(struct soap*, int id, char *name, char **value);

SOAP_FMAC5 int SOAP_FMAC6 ns__getparammmat3d(struct soap*, int id, char *name, int n, int p, int q, int nr, int nc, struct fdata **mmat3d);

SOAP_FMAC5 int SOAP_FMAC6 ns__getmetadata(struct soap*, int id, char *name, char **property);

SOAP_FMAC5 int SOAP_FMAC6 ns__setparamdouble(struct soap*, int id, char *name, double value, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__setparamint(struct soap*, int id, char *name, int value, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__setparamvec(struct soap*, int id, char *name, struct fdata value, int n, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__setparammat(struct soap*, int id, char *name, struct fdata value, int nr, int nc, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__setparamstring(struct soap*, int id, char *name, char *value, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__setparammmat3d(struct soap*, int id, char *name, struct fdata value, int n, int p, int q, int nr, int nc, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__setmetadata(struct soap*, int id, char *name, char *property, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__listmetadata(struct soap*, int id, char **list);

SOAP_FMAC5 int SOAP_FMAC6 ns__deletemetadata(struct soap*, int id, char *name, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__deleteparam(struct soap*, char *name, int id, int *status);

SOAP_FMAC5 int SOAP_FMAC6 ns__listparam(struct soap*, char *type, int id, char **list);

SOAP_FMAC5 int SOAP_FMAC6 ns__getnumobj(struct soap*, int id, int *numobj);

SOAP_FMAC5 int SOAP_FMAC6 ns__getobjnum(struct soap*, int id, int *objnum);

SOAP_FMAC5 int SOAP_FMAC6 ns__testgroupbarrier(struct soap*, int id, int *state);

SOAP_FMAC5 int SOAP_FMAC6 ns__setgroupbarrier(struct soap*, int id, int state, int *newstate);

#endif
