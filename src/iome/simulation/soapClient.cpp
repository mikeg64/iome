/* soapClient.cpp
   Generated by gSOAP 2.7.9l from IoSteerWS.h
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.9l 2009-10-21 19:50:35 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__add(struct soap *soap, const char *soap_endpoint, const char *soap_action, double a, double b, double *result)
{	struct ns__add soap_tmp_ns__add;
	struct ns__addResponse *soap_tmp_ns__addResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__add.a = a;
	soap_tmp_ns__add.b = b;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__add(soap, &soap_tmp_ns__add);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__add(soap, &soap_tmp_ns__add, "ns:add", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__add(soap, &soap_tmp_ns__add, "ns:add", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_double(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__addResponse = soap_get_ns__addResponse(soap, NULL, "ns:addResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ns__addResponse->result)
		*result = *soap_tmp_ns__addResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getstep(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, int *step)
{	struct ns__getstep soap_tmp_ns__getstep;
	struct ns__getstepResponse *soap_tmp_ns__getstepResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__getstep.id = id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getstep(soap, &soap_tmp_ns__getstep);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getstep(soap, &soap_tmp_ns__getstep, "ns:getstep", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getstep(soap, &soap_tmp_ns__getstep, "ns:getstep", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, step);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__getstepResponse = soap_get_ns__getstepResponse(soap, NULL, "ns:getstepResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (step && soap_tmp_ns__getstepResponse->step)
		*step = *soap_tmp_ns__getstepResponse->step;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setstep(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, int newstep, int *step)
{	struct ns__setstep soap_tmp_ns__setstep;
	struct ns__setstepResponse *soap_tmp_ns__setstepResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__setstep.id = id;
	soap_tmp_ns__setstep.newstep = newstep;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__setstep(soap, &soap_tmp_ns__setstep);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__setstep(soap, &soap_tmp_ns__setstep, "ns:setstep", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__setstep(soap, &soap_tmp_ns__setstep, "ns:setstep", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, step);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__setstepResponse = soap_get_ns__setstepResponse(soap, NULL, "ns:setstepResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (step && soap_tmp_ns__setstepResponse->step)
		*step = *soap_tmp_ns__setstepResponse->step;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getnsteps(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, int *nsstep)
{	struct ns__getnsteps soap_tmp_ns__getnsteps;
	struct ns__getnstepsResponse *soap_tmp_ns__getnstepsResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__getnsteps.id = id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getnsteps(soap, &soap_tmp_ns__getnsteps);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getnsteps(soap, &soap_tmp_ns__getnsteps, "ns:getnsteps", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getnsteps(soap, &soap_tmp_ns__getnsteps, "ns:getnsteps", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, nsstep);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__getnstepsResponse = soap_get_ns__getnstepsResponse(soap, NULL, "ns:getnstepsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (nsstep && soap_tmp_ns__getnstepsResponse->nsstep)
		*nsstep = *soap_tmp_ns__getnstepsResponse->nsstep;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setnsteps(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, int newnsteps, int *nsteps)
{	struct ns__setnsteps soap_tmp_ns__setnsteps;
	struct ns__setnstepsResponse *soap_tmp_ns__setnstepsResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__setnsteps.id = id;
	soap_tmp_ns__setnsteps.newnsteps = newnsteps;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__setnsteps(soap, &soap_tmp_ns__setnsteps);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__setnsteps(soap, &soap_tmp_ns__setnsteps, "ns:setnsteps", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__setnsteps(soap, &soap_tmp_ns__setnsteps, "ns:setnsteps", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, nsteps);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__setnstepsResponse = soap_get_ns__setnstepsResponse(soap, NULL, "ns:setnstepsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (nsteps && soap_tmp_ns__setnstepsResponse->nsteps)
		*nsteps = *soap_tmp_ns__setnstepsResponse->nsteps;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__runsimulationstep(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, int istepnum, int *status)
{	struct ns__runsimulationstep soap_tmp_ns__runsimulationstep;
	struct ns__runsimulationstepResponse *soap_tmp_ns__runsimulationstepResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__runsimulationstep.id = id;
	soap_tmp_ns__runsimulationstep.istepnum = istepnum;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__runsimulationstep(soap, &soap_tmp_ns__runsimulationstep);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__runsimulationstep(soap, &soap_tmp_ns__runsimulationstep, "ns:runsimulationstep", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__runsimulationstep(soap, &soap_tmp_ns__runsimulationstep, "ns:runsimulationstep", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__runsimulationstepResponse = soap_get_ns__runsimulationstepResponse(soap, NULL, "ns:runsimulationstepResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__runsimulationstepResponse->status)
		*status = *soap_tmp_ns__runsimulationstepResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__runsimulation(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *simfilecontent, char **result)
{	struct ns__runsimulation soap_tmp_ns__runsimulation;
	struct ns__runsimulationResponse *soap_tmp_ns__runsimulationResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__runsimulation.id = id;
	soap_tmp_ns__runsimulation.simfilecontent = simfilecontent;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__runsimulation(soap, &soap_tmp_ns__runsimulation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__runsimulation(soap, &soap_tmp_ns__runsimulation, "ns:runsimulation", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__runsimulation(soap, &soap_tmp_ns__runsimulation, "ns:runsimulation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	*result = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__runsimulationResponse = soap_get_ns__runsimulationResponse(soap, NULL, "ns:runsimulationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ns__runsimulationResponse->result)
		*result = *soap_tmp_ns__runsimulationResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__requestsimulation(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *simfilecontent, int *isimid)
{	struct ns__requestsimulation soap_tmp_ns__requestsimulation;
	struct ns__requestsimulationResponse *soap_tmp_ns__requestsimulationResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__requestsimulation.simfilecontent = simfilecontent;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__requestsimulation(soap, &soap_tmp_ns__requestsimulation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__requestsimulation(soap, &soap_tmp_ns__requestsimulation, "ns:requestsimulation", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__requestsimulation(soap, &soap_tmp_ns__requestsimulation, "ns:requestsimulation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, isimid);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__requestsimulationResponse = soap_get_ns__requestsimulationResponse(soap, NULL, "ns:requestsimulationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (isimid && soap_tmp_ns__requestsimulationResponse->isimid)
		*isimid = *soap_tmp_ns__requestsimulationResponse->isimid;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__runrequestedsimulation(struct soap *soap, const char *soap_endpoint, const char *soap_action, int isimid, int *istatus)
{	struct ns__runrequestedsimulation soap_tmp_ns__runrequestedsimulation;
	struct ns__runrequestedsimulationResponse *soap_tmp_ns__runrequestedsimulationResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__runrequestedsimulation.isimid = isimid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__runrequestedsimulation(soap, &soap_tmp_ns__runrequestedsimulation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__runrequestedsimulation(soap, &soap_tmp_ns__runrequestedsimulation, "ns:runrequestedsimulation", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__runrequestedsimulation(soap, &soap_tmp_ns__runrequestedsimulation, "ns:runrequestedsimulation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, istatus);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__runrequestedsimulationResponse = soap_get_ns__runrequestedsimulationResponse(soap, NULL, "ns:runrequestedsimulationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (istatus && soap_tmp_ns__runrequestedsimulationResponse->istatus)
		*istatus = *soap_tmp_ns__runrequestedsimulationResponse->istatus;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__submitsimulation(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *simfilecontent, int *isimid)
{	struct ns__submitsimulation soap_tmp_ns__submitsimulation;
	struct ns__submitsimulationResponse *soap_tmp_ns__submitsimulationResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__submitsimulation.simfilecontent = simfilecontent;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__submitsimulation(soap, &soap_tmp_ns__submitsimulation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__submitsimulation(soap, &soap_tmp_ns__submitsimulation, "ns:submitsimulation", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__submitsimulation(soap, &soap_tmp_ns__submitsimulation, "ns:submitsimulation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, isimid);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__submitsimulationResponse = soap_get_ns__submitsimulationResponse(soap, NULL, "ns:submitsimulationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (isimid && soap_tmp_ns__submitsimulationResponse->isimid)
		*isimid = *soap_tmp_ns__submitsimulationResponse->isimid;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__simulationstatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, int isimid, int *status)
{	struct ns__simulationstatus soap_tmp_ns__simulationstatus;
	struct ns__simulationstatusResponse *soap_tmp_ns__simulationstatusResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__simulationstatus.isimid = isimid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__simulationstatus(soap, &soap_tmp_ns__simulationstatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__simulationstatus(soap, &soap_tmp_ns__simulationstatus, "ns:simulationstatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__simulationstatus(soap, &soap_tmp_ns__simulationstatus, "ns:simulationstatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__simulationstatusResponse = soap_get_ns__simulationstatusResponse(soap, NULL, "ns:simulationstatusResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__simulationstatusResponse->status)
		*status = *soap_tmp_ns__simulationstatusResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setsimulationstatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, int newstatus, int isimid, int *status)
{	struct ns__setsimulationstatus soap_tmp_ns__setsimulationstatus;
	struct ns__setsimulationstatusResponse *soap_tmp_ns__setsimulationstatusResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__setsimulationstatus.newstatus = newstatus;
	soap_tmp_ns__setsimulationstatus.isimid = isimid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__setsimulationstatus(soap, &soap_tmp_ns__setsimulationstatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__setsimulationstatus(soap, &soap_tmp_ns__setsimulationstatus, "ns:setsimulationstatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__setsimulationstatus(soap, &soap_tmp_ns__setsimulationstatus, "ns:setsimulationstatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__setsimulationstatusResponse = soap_get_ns__setsimulationstatusResponse(soap, NULL, "ns:setsimulationstatusResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__setsimulationstatusResponse->status)
		*status = *soap_tmp_ns__setsimulationstatusResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getsimulationresults(struct soap *soap, const char *soap_endpoint, const char *soap_action, int isimid, char **result)
{	struct ns__getsimulationresults soap_tmp_ns__getsimulationresults;
	struct ns__getsimulationresultsResponse *soap_tmp_ns__getsimulationresultsResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__getsimulationresults.isimid = isimid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getsimulationresults(soap, &soap_tmp_ns__getsimulationresults);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getsimulationresults(soap, &soap_tmp_ns__getsimulationresults, "ns:getsimulationresults", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getsimulationresults(soap, &soap_tmp_ns__getsimulationresults, "ns:getsimulationresults", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	*result = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__getsimulationresultsResponse = soap_get_ns__getsimulationresultsResponse(soap, NULL, "ns:getsimulationresultsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ns__getsimulationresultsResponse->result)
		*result = *soap_tmp_ns__getsimulationresultsResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__deletesimulation(struct soap *soap, const char *soap_endpoint, const char *soap_action, int isimid, int *status)
{	struct ns__deletesimulation soap_tmp_ns__deletesimulation;
	struct ns__deletesimulationResponse *soap_tmp_ns__deletesimulationResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__deletesimulation.isimid = isimid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__deletesimulation(soap, &soap_tmp_ns__deletesimulation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__deletesimulation(soap, &soap_tmp_ns__deletesimulation, "ns:deletesimulation", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__deletesimulation(soap, &soap_tmp_ns__deletesimulation, "ns:deletesimulation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__deletesimulationResponse = soap_get_ns__deletesimulationResponse(soap, NULL, "ns:deletesimulationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__deletesimulationResponse->status)
		*status = *soap_tmp_ns__deletesimulationResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__newsimulation(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *simname, char *xslname, int *status)
{	struct ns__newsimulation soap_tmp_ns__newsimulation;
	struct ns__newsimulationResponse *soap_tmp_ns__newsimulationResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__newsimulation.id = id;
	soap_tmp_ns__newsimulation.simname = simname;
	soap_tmp_ns__newsimulation.xslname = xslname;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__newsimulation(soap, &soap_tmp_ns__newsimulation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__newsimulation(soap, &soap_tmp_ns__newsimulation, "ns:newsimulation", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__newsimulation(soap, &soap_tmp_ns__newsimulation, "ns:newsimulation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__newsimulationResponse = soap_get_ns__newsimulationResponse(soap, NULL, "ns:newsimulationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__newsimulationResponse->status)
		*status = *soap_tmp_ns__newsimulationResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__createsimulation(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *filename, int *status)
{	struct ns__createsimulation soap_tmp_ns__createsimulation;
	struct ns__createsimulationResponse *soap_tmp_ns__createsimulationResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__createsimulation.id = id;
	soap_tmp_ns__createsimulation.filename = filename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__createsimulation(soap, &soap_tmp_ns__createsimulation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__createsimulation(soap, &soap_tmp_ns__createsimulation, "ns:createsimulation", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__createsimulation(soap, &soap_tmp_ns__createsimulation, "ns:createsimulation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__createsimulationResponse = soap_get_ns__createsimulationResponse(soap, NULL, "ns:createsimulationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__createsimulationResponse->status)
		*status = *soap_tmp_ns__createsimulationResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__writelocalsimulation(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *filename, char **filecontent)
{	struct ns__writelocalsimulation soap_tmp_ns__writelocalsimulation;
	struct ns__writelocalsimulationResponse *soap_tmp_ns__writelocalsimulationResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__writelocalsimulation.id = id;
	soap_tmp_ns__writelocalsimulation.filename = filename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__writelocalsimulation(soap, &soap_tmp_ns__writelocalsimulation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__writelocalsimulation(soap, &soap_tmp_ns__writelocalsimulation, "ns:writelocalsimulation", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__writelocalsimulation(soap, &soap_tmp_ns__writelocalsimulation, "ns:writelocalsimulation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	*filecontent = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__writelocalsimulationResponse = soap_get_ns__writelocalsimulationResponse(soap, NULL, "ns:writelocalsimulationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (filecontent && soap_tmp_ns__writelocalsimulationResponse->filecontent)
		*filecontent = *soap_tmp_ns__writelocalsimulationResponse->filecontent;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__readlocalsimulation(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *filename, int *status)
{	struct ns__readlocalsimulation soap_tmp_ns__readlocalsimulation;
	struct ns__readlocalsimulationResponse *soap_tmp_ns__readlocalsimulationResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__readlocalsimulation.id = id;
	soap_tmp_ns__readlocalsimulation.filename = filename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__readlocalsimulation(soap, &soap_tmp_ns__readlocalsimulation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__readlocalsimulation(soap, &soap_tmp_ns__readlocalsimulation, "ns:readlocalsimulation", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__readlocalsimulation(soap, &soap_tmp_ns__readlocalsimulation, "ns:readlocalsimulation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__readlocalsimulationResponse = soap_get_ns__readlocalsimulationResponse(soap, NULL, "ns:readlocalsimulationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__readlocalsimulationResponse->status)
		*status = *soap_tmp_ns__readlocalsimulationResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__writesimulation(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *filename, char **filecontent)
{	struct ns__writesimulation soap_tmp_ns__writesimulation;
	struct ns__writesimulationResponse *soap_tmp_ns__writesimulationResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__writesimulation.id = id;
	soap_tmp_ns__writesimulation.filename = filename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__writesimulation(soap, &soap_tmp_ns__writesimulation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__writesimulation(soap, &soap_tmp_ns__writesimulation, "ns:writesimulation", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__writesimulation(soap, &soap_tmp_ns__writesimulation, "ns:writesimulation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	*filecontent = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__writesimulationResponse = soap_get_ns__writesimulationResponse(soap, NULL, "ns:writesimulationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (filecontent && soap_tmp_ns__writesimulationResponse->filecontent)
		*filecontent = *soap_tmp_ns__writesimulationResponse->filecontent;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__readsimulation(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *filename, int *status)
{	struct ns__readsimulation soap_tmp_ns__readsimulation;
	struct ns__readsimulationResponse *soap_tmp_ns__readsimulationResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__readsimulation.id = id;
	soap_tmp_ns__readsimulation.filename = filename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__readsimulation(soap, &soap_tmp_ns__readsimulation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__readsimulation(soap, &soap_tmp_ns__readsimulation, "ns:readsimulation", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__readsimulation(soap, &soap_tmp_ns__readsimulation, "ns:readsimulation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__readsimulationResponse = soap_get_ns__readsimulationResponse(soap, NULL, "ns:readsimulationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__readsimulationResponse->status)
		*status = *soap_tmp_ns__readsimulationResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__exitiome(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, int *status)
{	struct ns__exitiome soap_tmp_ns__exitiome;
	struct ns__exitiomeResponse *soap_tmp_ns__exitiomeResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__exitiome.id = id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__exitiome(soap, &soap_tmp_ns__exitiome);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__exitiome(soap, &soap_tmp_ns__exitiome, "ns:exitiome", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__exitiome(soap, &soap_tmp_ns__exitiome, "ns:exitiome", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__exitiomeResponse = soap_get_ns__exitiomeResponse(soap, NULL, "ns:exitiomeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__exitiomeResponse->status)
		*status = *soap_tmp_ns__exitiomeResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__addparamdouble(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, double value, int iflag, int *status)
{	struct ns__addparamdouble soap_tmp_ns__addparamdouble;
	struct ns__addparamdoubleResponse *soap_tmp_ns__addparamdoubleResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__addparamdouble.id = id;
	soap_tmp_ns__addparamdouble.name = name;
	soap_tmp_ns__addparamdouble.value = value;
	soap_tmp_ns__addparamdouble.iflag = iflag;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__addparamdouble(soap, &soap_tmp_ns__addparamdouble);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__addparamdouble(soap, &soap_tmp_ns__addparamdouble, "ns:addparamdouble", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__addparamdouble(soap, &soap_tmp_ns__addparamdouble, "ns:addparamdouble", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__addparamdoubleResponse = soap_get_ns__addparamdoubleResponse(soap, NULL, "ns:addparamdoubleResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__addparamdoubleResponse->status)
		*status = *soap_tmp_ns__addparamdoubleResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__addparamint(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, int value, int iflag, int *status)
{	struct ns__addparamint soap_tmp_ns__addparamint;
	struct ns__addparamintResponse *soap_tmp_ns__addparamintResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__addparamint.id = id;
	soap_tmp_ns__addparamint.name = name;
	soap_tmp_ns__addparamint.value = value;
	soap_tmp_ns__addparamint.iflag = iflag;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__addparamint(soap, &soap_tmp_ns__addparamint);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__addparamint(soap, &soap_tmp_ns__addparamint, "ns:addparamint", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__addparamint(soap, &soap_tmp_ns__addparamint, "ns:addparamint", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__addparamintResponse = soap_get_ns__addparamintResponse(soap, NULL, "ns:addparamintResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__addparamintResponse->status)
		*status = *soap_tmp_ns__addparamintResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__addparamvec(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, struct fdata value, int n, int iflag, int *status)
{	struct ns__addparamvec soap_tmp_ns__addparamvec;
	struct ns__addparamvecResponse *soap_tmp_ns__addparamvecResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__addparamvec.id = id;
	soap_tmp_ns__addparamvec.name = name;
	soap_tmp_ns__addparamvec.value = value;
	soap_tmp_ns__addparamvec.n = n;
	soap_tmp_ns__addparamvec.iflag = iflag;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__addparamvec(soap, &soap_tmp_ns__addparamvec);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__addparamvec(soap, &soap_tmp_ns__addparamvec, "ns:addparamvec", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__addparamvec(soap, &soap_tmp_ns__addparamvec, "ns:addparamvec", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__addparamvecResponse = soap_get_ns__addparamvecResponse(soap, NULL, "ns:addparamvecResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__addparamvecResponse->status)
		*status = *soap_tmp_ns__addparamvecResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__addparammat(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, struct fdata value, int nr, int nc, int iflag, int *status)
{	struct ns__addparammat soap_tmp_ns__addparammat;
	struct ns__addparammatResponse *soap_tmp_ns__addparammatResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__addparammat.id = id;
	soap_tmp_ns__addparammat.name = name;
	soap_tmp_ns__addparammat.value = value;
	soap_tmp_ns__addparammat.nr = nr;
	soap_tmp_ns__addparammat.nc = nc;
	soap_tmp_ns__addparammat.iflag = iflag;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__addparammat(soap, &soap_tmp_ns__addparammat);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__addparammat(soap, &soap_tmp_ns__addparammat, "ns:addparammat", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__addparammat(soap, &soap_tmp_ns__addparammat, "ns:addparammat", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__addparammatResponse = soap_get_ns__addparammatResponse(soap, NULL, "ns:addparammatResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__addparammatResponse->status)
		*status = *soap_tmp_ns__addparammatResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__addparamstring(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, char *value, int iflag, int *status)
{	struct ns__addparamstring soap_tmp_ns__addparamstring;
	struct ns__addparamstringResponse *soap_tmp_ns__addparamstringResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__addparamstring.id = id;
	soap_tmp_ns__addparamstring.name = name;
	soap_tmp_ns__addparamstring.value = value;
	soap_tmp_ns__addparamstring.iflag = iflag;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__addparamstring(soap, &soap_tmp_ns__addparamstring);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__addparamstring(soap, &soap_tmp_ns__addparamstring, "ns:addparamstring", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__addparamstring(soap, &soap_tmp_ns__addparamstring, "ns:addparamstring", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__addparamstringResponse = soap_get_ns__addparamstringResponse(soap, NULL, "ns:addparamstringResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__addparamstringResponse->status)
		*status = *soap_tmp_ns__addparamstringResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__addparammmat3d(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, struct fdata value, int n, int p, int q, int nr, int nc, int iflag, int *status)
{	struct ns__addparammmat3d soap_tmp_ns__addparammmat3d;
	struct ns__addparammmat3dResponse *soap_tmp_ns__addparammmat3dResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__addparammmat3d.id = id;
	soap_tmp_ns__addparammmat3d.name = name;
	soap_tmp_ns__addparammmat3d.value = value;
	soap_tmp_ns__addparammmat3d.n = n;
	soap_tmp_ns__addparammmat3d.p = p;
	soap_tmp_ns__addparammmat3d.q = q;
	soap_tmp_ns__addparammmat3d.nr = nr;
	soap_tmp_ns__addparammmat3d.nc = nc;
	soap_tmp_ns__addparammmat3d.iflag = iflag;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__addparammmat3d(soap, &soap_tmp_ns__addparammmat3d);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__addparammmat3d(soap, &soap_tmp_ns__addparammmat3d, "ns:addparammmat3d", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__addparammmat3d(soap, &soap_tmp_ns__addparammmat3d, "ns:addparammmat3d", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__addparammmat3dResponse = soap_get_ns__addparammmat3dResponse(soap, NULL, "ns:addparammmat3dResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__addparammmat3dResponse->status)
		*status = *soap_tmp_ns__addparammmat3dResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__addmetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, char *property, int *status)
{	struct ns__addmetadata soap_tmp_ns__addmetadata;
	struct ns__addmetadataResponse *soap_tmp_ns__addmetadataResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__addmetadata.id = id;
	soap_tmp_ns__addmetadata.name = name;
	soap_tmp_ns__addmetadata.property = property;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__addmetadata(soap, &soap_tmp_ns__addmetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__addmetadata(soap, &soap_tmp_ns__addmetadata, "ns:addmetadata", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__addmetadata(soap, &soap_tmp_ns__addmetadata, "ns:addmetadata", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__addmetadataResponse = soap_get_ns__addmetadataResponse(soap, NULL, "ns:addmetadataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__addmetadataResponse->status)
		*status = *soap_tmp_ns__addmetadataResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getparamdouble(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, double *value)
{	struct ns__getparamdouble soap_tmp_ns__getparamdouble;
	struct ns__getparamdoubleResponse *soap_tmp_ns__getparamdoubleResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__getparamdouble.id = id;
	soap_tmp_ns__getparamdouble.name = name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getparamdouble(soap, &soap_tmp_ns__getparamdouble);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getparamdouble(soap, &soap_tmp_ns__getparamdouble, "ns:getparamdouble", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getparamdouble(soap, &soap_tmp_ns__getparamdouble, "ns:getparamdouble", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_double(soap, value);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__getparamdoubleResponse = soap_get_ns__getparamdoubleResponse(soap, NULL, "ns:getparamdoubleResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (value && soap_tmp_ns__getparamdoubleResponse->value)
		*value = *soap_tmp_ns__getparamdoubleResponse->value;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getparamint(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, int *value)
{	struct ns__getparamint soap_tmp_ns__getparamint;
	struct ns__getparamintResponse *soap_tmp_ns__getparamintResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__getparamint.id = id;
	soap_tmp_ns__getparamint.name = name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getparamint(soap, &soap_tmp_ns__getparamint);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getparamint(soap, &soap_tmp_ns__getparamint, "ns:getparamint", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getparamint(soap, &soap_tmp_ns__getparamint, "ns:getparamint", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, value);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__getparamintResponse = soap_get_ns__getparamintResponse(soap, NULL, "ns:getparamintResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (value && soap_tmp_ns__getparamintResponse->value)
		*value = *soap_tmp_ns__getparamintResponse->value;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getparamvec(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, int n, struct fdata **dval)
{	struct ns__getparamvec soap_tmp_ns__getparamvec;
	struct ns__getparamvecResponse *soap_tmp_ns__getparamvecResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__getparamvec.id = id;
	soap_tmp_ns__getparamvec.name = name;
	soap_tmp_ns__getparamvec.n = n;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getparamvec(soap, &soap_tmp_ns__getparamvec);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getparamvec(soap, &soap_tmp_ns__getparamvec, "ns:getparamvec", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getparamvec(soap, &soap_tmp_ns__getparamvec, "ns:getparamvec", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	*dval = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__getparamvecResponse = soap_get_ns__getparamvecResponse(soap, NULL, "ns:getparamvecResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (dval && soap_tmp_ns__getparamvecResponse->dval)
		*dval = *soap_tmp_ns__getparamvecResponse->dval;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getparammat(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, int nr, int nc, struct fdata **dval)
{	struct ns__getparammat soap_tmp_ns__getparammat;
	struct ns__getparammatResponse *soap_tmp_ns__getparammatResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__getparammat.id = id;
	soap_tmp_ns__getparammat.name = name;
	soap_tmp_ns__getparammat.nr = nr;
	soap_tmp_ns__getparammat.nc = nc;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getparammat(soap, &soap_tmp_ns__getparammat);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getparammat(soap, &soap_tmp_ns__getparammat, "ns:getparammat", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getparammat(soap, &soap_tmp_ns__getparammat, "ns:getparammat", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	*dval = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__getparammatResponse = soap_get_ns__getparammatResponse(soap, NULL, "ns:getparammatResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (dval && soap_tmp_ns__getparammatResponse->dval)
		*dval = *soap_tmp_ns__getparammatResponse->dval;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getparamstring(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, char **value)
{	struct ns__getparamstring soap_tmp_ns__getparamstring;
	struct ns__getparamstringResponse *soap_tmp_ns__getparamstringResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__getparamstring.id = id;
	soap_tmp_ns__getparamstring.name = name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getparamstring(soap, &soap_tmp_ns__getparamstring);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getparamstring(soap, &soap_tmp_ns__getparamstring, "ns:getparamstring", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getparamstring(soap, &soap_tmp_ns__getparamstring, "ns:getparamstring", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	*value = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__getparamstringResponse = soap_get_ns__getparamstringResponse(soap, NULL, "ns:getparamstringResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (value && soap_tmp_ns__getparamstringResponse->value)
		*value = *soap_tmp_ns__getparamstringResponse->value;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getparammmat3d(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, int n, int p, int q, int nr, int nc, struct fdata **mmat3d)
{	struct ns__getparammmat3d soap_tmp_ns__getparammmat3d;
	struct ns__getparammmat3dResponse *soap_tmp_ns__getparammmat3dResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__getparammmat3d.id = id;
	soap_tmp_ns__getparammmat3d.name = name;
	soap_tmp_ns__getparammmat3d.n = n;
	soap_tmp_ns__getparammmat3d.p = p;
	soap_tmp_ns__getparammmat3d.q = q;
	soap_tmp_ns__getparammmat3d.nr = nr;
	soap_tmp_ns__getparammmat3d.nc = nc;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getparammmat3d(soap, &soap_tmp_ns__getparammmat3d);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getparammmat3d(soap, &soap_tmp_ns__getparammmat3d, "ns:getparammmat3d", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getparammmat3d(soap, &soap_tmp_ns__getparammmat3d, "ns:getparammmat3d", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	*mmat3d = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__getparammmat3dResponse = soap_get_ns__getparammmat3dResponse(soap, NULL, "ns:getparammmat3dResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (mmat3d && soap_tmp_ns__getparammmat3dResponse->mmat3d)
		*mmat3d = *soap_tmp_ns__getparammmat3dResponse->mmat3d;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getmetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, char **property)
{	struct ns__getmetadata soap_tmp_ns__getmetadata;
	struct ns__getmetadataResponse *soap_tmp_ns__getmetadataResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__getmetadata.id = id;
	soap_tmp_ns__getmetadata.name = name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getmetadata(soap, &soap_tmp_ns__getmetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getmetadata(soap, &soap_tmp_ns__getmetadata, "ns:getmetadata", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getmetadata(soap, &soap_tmp_ns__getmetadata, "ns:getmetadata", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	*property = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__getmetadataResponse = soap_get_ns__getmetadataResponse(soap, NULL, "ns:getmetadataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (property && soap_tmp_ns__getmetadataResponse->property)
		*property = *soap_tmp_ns__getmetadataResponse->property;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setparamdouble(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, double value, int *status)
{	struct ns__setparamdouble soap_tmp_ns__setparamdouble;
	struct ns__setparamdoubleResponse *soap_tmp_ns__setparamdoubleResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__setparamdouble.id = id;
	soap_tmp_ns__setparamdouble.name = name;
	soap_tmp_ns__setparamdouble.value = value;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__setparamdouble(soap, &soap_tmp_ns__setparamdouble);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__setparamdouble(soap, &soap_tmp_ns__setparamdouble, "ns:setparamdouble", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__setparamdouble(soap, &soap_tmp_ns__setparamdouble, "ns:setparamdouble", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__setparamdoubleResponse = soap_get_ns__setparamdoubleResponse(soap, NULL, "ns:setparamdoubleResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__setparamdoubleResponse->status)
		*status = *soap_tmp_ns__setparamdoubleResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setparamint(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, int value, int *status)
{	struct ns__setparamint soap_tmp_ns__setparamint;
	struct ns__setparamintResponse *soap_tmp_ns__setparamintResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__setparamint.id = id;
	soap_tmp_ns__setparamint.name = name;
	soap_tmp_ns__setparamint.value = value;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__setparamint(soap, &soap_tmp_ns__setparamint);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__setparamint(soap, &soap_tmp_ns__setparamint, "ns:setparamint", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__setparamint(soap, &soap_tmp_ns__setparamint, "ns:setparamint", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__setparamintResponse = soap_get_ns__setparamintResponse(soap, NULL, "ns:setparamintResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__setparamintResponse->status)
		*status = *soap_tmp_ns__setparamintResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setparamvec(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, struct fdata value, int n, int *status)
{	struct ns__setparamvec soap_tmp_ns__setparamvec;
	struct ns__setparamvecResponse *soap_tmp_ns__setparamvecResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__setparamvec.id = id;
	soap_tmp_ns__setparamvec.name = name;
	soap_tmp_ns__setparamvec.value = value;
	soap_tmp_ns__setparamvec.n = n;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__setparamvec(soap, &soap_tmp_ns__setparamvec);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__setparamvec(soap, &soap_tmp_ns__setparamvec, "ns:setparamvec", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__setparamvec(soap, &soap_tmp_ns__setparamvec, "ns:setparamvec", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__setparamvecResponse = soap_get_ns__setparamvecResponse(soap, NULL, "ns:setparamvecResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__setparamvecResponse->status)
		*status = *soap_tmp_ns__setparamvecResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setparammat(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, struct fdata value, int nr, int nc, int *status)
{	struct ns__setparammat soap_tmp_ns__setparammat;
	struct ns__setparammatResponse *soap_tmp_ns__setparammatResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__setparammat.id = id;
	soap_tmp_ns__setparammat.name = name;
	soap_tmp_ns__setparammat.value = value;
	soap_tmp_ns__setparammat.nr = nr;
	soap_tmp_ns__setparammat.nc = nc;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__setparammat(soap, &soap_tmp_ns__setparammat);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__setparammat(soap, &soap_tmp_ns__setparammat, "ns:setparammat", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__setparammat(soap, &soap_tmp_ns__setparammat, "ns:setparammat", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__setparammatResponse = soap_get_ns__setparammatResponse(soap, NULL, "ns:setparammatResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__setparammatResponse->status)
		*status = *soap_tmp_ns__setparammatResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setparamstring(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, char *value, int *status)
{	struct ns__setparamstring soap_tmp_ns__setparamstring;
	struct ns__setparamstringResponse *soap_tmp_ns__setparamstringResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__setparamstring.id = id;
	soap_tmp_ns__setparamstring.name = name;
	soap_tmp_ns__setparamstring.value = value;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__setparamstring(soap, &soap_tmp_ns__setparamstring);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__setparamstring(soap, &soap_tmp_ns__setparamstring, "ns:setparamstring", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__setparamstring(soap, &soap_tmp_ns__setparamstring, "ns:setparamstring", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__setparamstringResponse = soap_get_ns__setparamstringResponse(soap, NULL, "ns:setparamstringResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__setparamstringResponse->status)
		*status = *soap_tmp_ns__setparamstringResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setparammmat3d(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, struct fdata value, int n, int p, int q, int nr, int nc, int *status)
{	struct ns__setparammmat3d soap_tmp_ns__setparammmat3d;
	struct ns__setparammmat3dResponse *soap_tmp_ns__setparammmat3dResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__setparammmat3d.id = id;
	soap_tmp_ns__setparammmat3d.name = name;
	soap_tmp_ns__setparammmat3d.value = value;
	soap_tmp_ns__setparammmat3d.n = n;
	soap_tmp_ns__setparammmat3d.p = p;
	soap_tmp_ns__setparammmat3d.q = q;
	soap_tmp_ns__setparammmat3d.nr = nr;
	soap_tmp_ns__setparammmat3d.nc = nc;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__setparammmat3d(soap, &soap_tmp_ns__setparammmat3d);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__setparammmat3d(soap, &soap_tmp_ns__setparammmat3d, "ns:setparammmat3d", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__setparammmat3d(soap, &soap_tmp_ns__setparammmat3d, "ns:setparammmat3d", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__setparammmat3dResponse = soap_get_ns__setparammmat3dResponse(soap, NULL, "ns:setparammmat3dResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__setparammmat3dResponse->status)
		*status = *soap_tmp_ns__setparammmat3dResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setmetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, char *property, int *status)
{	struct ns__setmetadata soap_tmp_ns__setmetadata;
	struct ns__setmetadataResponse *soap_tmp_ns__setmetadataResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__setmetadata.id = id;
	soap_tmp_ns__setmetadata.name = name;
	soap_tmp_ns__setmetadata.property = property;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__setmetadata(soap, &soap_tmp_ns__setmetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__setmetadata(soap, &soap_tmp_ns__setmetadata, "ns:setmetadata", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__setmetadata(soap, &soap_tmp_ns__setmetadata, "ns:setmetadata", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__setmetadataResponse = soap_get_ns__setmetadataResponse(soap, NULL, "ns:setmetadataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__setmetadataResponse->status)
		*status = *soap_tmp_ns__setmetadataResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__listmetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char **list)
{	struct ns__listmetadata soap_tmp_ns__listmetadata;
	struct ns__listmetadataResponse *soap_tmp_ns__listmetadataResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__listmetadata.id = id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__listmetadata(soap, &soap_tmp_ns__listmetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__listmetadata(soap, &soap_tmp_ns__listmetadata, "ns:listmetadata", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__listmetadata(soap, &soap_tmp_ns__listmetadata, "ns:listmetadata", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	*list = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__listmetadataResponse = soap_get_ns__listmetadataResponse(soap, NULL, "ns:listmetadataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (list && soap_tmp_ns__listmetadataResponse->list)
		*list = *soap_tmp_ns__listmetadataResponse->list;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__deletemetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, char *name, int *status)
{	struct ns__deletemetadata soap_tmp_ns__deletemetadata;
	struct ns__deletemetadataResponse *soap_tmp_ns__deletemetadataResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__deletemetadata.id = id;
	soap_tmp_ns__deletemetadata.name = name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__deletemetadata(soap, &soap_tmp_ns__deletemetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__deletemetadata(soap, &soap_tmp_ns__deletemetadata, "ns:deletemetadata", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__deletemetadata(soap, &soap_tmp_ns__deletemetadata, "ns:deletemetadata", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__deletemetadataResponse = soap_get_ns__deletemetadataResponse(soap, NULL, "ns:deletemetadataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__deletemetadataResponse->status)
		*status = *soap_tmp_ns__deletemetadataResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__deleteparam(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *name, int id, int *status)
{	struct ns__deleteparam soap_tmp_ns__deleteparam;
	struct ns__deleteparamResponse *soap_tmp_ns__deleteparamResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__deleteparam.name = name;
	soap_tmp_ns__deleteparam.id = id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__deleteparam(soap, &soap_tmp_ns__deleteparam);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__deleteparam(soap, &soap_tmp_ns__deleteparam, "ns:deleteparam", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__deleteparam(soap, &soap_tmp_ns__deleteparam, "ns:deleteparam", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__deleteparamResponse = soap_get_ns__deleteparamResponse(soap, NULL, "ns:deleteparamResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_ns__deleteparamResponse->status)
		*status = *soap_tmp_ns__deleteparamResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__listparam(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *type, int id, char **list)
{	struct ns__listparam soap_tmp_ns__listparam;
	struct ns__listparamResponse *soap_tmp_ns__listparamResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__listparam.type = type;
	soap_tmp_ns__listparam.id = id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__listparam(soap, &soap_tmp_ns__listparam);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__listparam(soap, &soap_tmp_ns__listparam, "ns:listparam", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__listparam(soap, &soap_tmp_ns__listparam, "ns:listparam", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	*list = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__listparamResponse = soap_get_ns__listparamResponse(soap, NULL, "ns:listparamResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (list && soap_tmp_ns__listparamResponse->list)
		*list = *soap_tmp_ns__listparamResponse->list;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getnumobj(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, int *numobj)
{	struct ns__getnumobj soap_tmp_ns__getnumobj;
	struct ns__getnumobjResponse *soap_tmp_ns__getnumobjResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__getnumobj.id = id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getnumobj(soap, &soap_tmp_ns__getnumobj);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getnumobj(soap, &soap_tmp_ns__getnumobj, "ns:getnumobj", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getnumobj(soap, &soap_tmp_ns__getnumobj, "ns:getnumobj", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, numobj);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__getnumobjResponse = soap_get_ns__getnumobjResponse(soap, NULL, "ns:getnumobjResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (numobj && soap_tmp_ns__getnumobjResponse->numobj)
		*numobj = *soap_tmp_ns__getnumobjResponse->numobj;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getobjnum(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, int *objnum)
{	struct ns__getobjnum soap_tmp_ns__getobjnum;
	struct ns__getobjnumResponse *soap_tmp_ns__getobjnumResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__getobjnum.id = id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getobjnum(soap, &soap_tmp_ns__getobjnum);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getobjnum(soap, &soap_tmp_ns__getobjnum, "ns:getobjnum", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getobjnum(soap, &soap_tmp_ns__getobjnum, "ns:getobjnum", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, objnum);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__getobjnumResponse = soap_get_ns__getobjnumResponse(soap, NULL, "ns:getobjnumResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (objnum && soap_tmp_ns__getobjnumResponse->objnum)
		*objnum = *soap_tmp_ns__getobjnumResponse->objnum;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__testgroupbarrier(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, int *state)
{	struct ns__testgroupbarrier soap_tmp_ns__testgroupbarrier;
	struct ns__testgroupbarrierResponse *soap_tmp_ns__testgroupbarrierResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__testgroupbarrier.id = id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__testgroupbarrier(soap, &soap_tmp_ns__testgroupbarrier);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__testgroupbarrier(soap, &soap_tmp_ns__testgroupbarrier, "ns:testgroupbarrier", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__testgroupbarrier(soap, &soap_tmp_ns__testgroupbarrier, "ns:testgroupbarrier", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, state);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__testgroupbarrierResponse = soap_get_ns__testgroupbarrierResponse(soap, NULL, "ns:testgroupbarrierResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (state && soap_tmp_ns__testgroupbarrierResponse->state)
		*state = *soap_tmp_ns__testgroupbarrierResponse->state;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setgroupbarrier(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, int state, int *newstate)
{	struct ns__setgroupbarrier soap_tmp_ns__setgroupbarrier;
	struct ns__setgroupbarrierResponse *soap_tmp_ns__setgroupbarrierResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://mikeg.staff.shef.ac.uk/IOSteerWS.cgi";
	soap->encodingStyle = "";
	soap_tmp_ns__setgroupbarrier.id = id;
	soap_tmp_ns__setgroupbarrier.state = state;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__setgroupbarrier(soap, &soap_tmp_ns__setgroupbarrier);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__setgroupbarrier(soap, &soap_tmp_ns__setgroupbarrier, "ns:setgroupbarrier", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__setgroupbarrier(soap, &soap_tmp_ns__setgroupbarrier, "ns:setgroupbarrier", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, newstate);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__setgroupbarrierResponse = soap_get_ns__setgroupbarrierResponse(soap, NULL, "ns:setgroupbarrierResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (newstate && soap_tmp_ns__setgroupbarrierResponse->newstate)
		*newstate = *soap_tmp_ns__setgroupbarrierResponse->newstate;
	return soap_closesock(soap);
}

/* End of soapClient.cpp */
